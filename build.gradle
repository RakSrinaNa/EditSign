buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.github.breadmoirai.github-release" version '2.2.12'
    id 'com.novoda.build-properties' version '0.4.1'
}

buildProperties {
    secrets {
        using(file('secrets.properties')).or(System.getenv()).or([
                "CURSEFORGE_API_KEY": "N/A",
                "GITHUB_TOKEN"      : "N/A"
        ])
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: "com.github.breadmoirai.github-release"

repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
    mavenLocal()
    jcenter()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-Xlint:deprecation']
}

javadoc {
    failOnError = false
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "${project.repoName}-${project.loader}-${project.minecraft_version}"

minecraft {
    mappings channel: project.mcp_channel.toString(), version: project.mcp_mappings.toString()

    runs {
        client {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run-client')

            mods {
                edit_sign {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run-server')
            mods {
                edit_sign {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"
}

jar {
    manifest {
        attributes(["Specification-Title"     : project.mod_id,
                    "Specification-Vendor"    : "RakSrinaNa",
                    "Specification-Version"   : "0.2",
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.version,
                    "Implementation-Vendor"   : "RakSrinaNa",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

task deobfJar(type: Jar) {
    appendix = "${project.minecraft_version}"
    classifier = 'deobf'
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    appendix = "${project.minecraft_version}"
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    appendix = "${project.minecraft_version}"
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

curseforge {
    apiKey = buildProperties.secrets['CURSEFORGE_API_KEY'].string
    project {
        id = "${project.curseforge_project_id}"
        changelogType = 'markdown'
        addGameVersion project.minecraft_version
        addGameVersion project.loader
        changelog = getLatestChangeLog()
        releaseType = "${project.curseforge_release_type}"
        mainArtifact(jar) {
            displayName = "${archivesBaseName}-${project.version}"
        }
    }
    options {
        javaVersionAutoDetect = false
    }
}

githubRelease {
    owner = "RakSrinaNa"
    repo = project.repoName
    token = buildProperties.secrets['GITHUB_TOKEN'].string
    tagName = "${archivesBaseName}-${project.version}"
    releaseName = "${archivesBaseName}-${project.version}"
    targetCommitish = "${project.minecraft_version}"
    body {
        return getLatestChangeLog()
    }
}

artifacts {
    if (project.hasProperty('doDeobfJar')) {
        archives deobfJar
    }
    if (project.hasProperty('doSourceJar')) {
        archives sourcesJar
    }
    if (project.hasProperty('doJavadocJar')) {
        archives javadocJar
    }
}

// Update JSON management

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

import java.time.LocalDate
import java.time.format.DateTimeFormatter

def writeUpdateJson() {
    def version = project.version
    def slurper = new JsonSlurper()
    def file = new File('update.json')
    def json = slurper.parse(file)

    // TODO: Maybe add something to create an abbreviated changelog? May not be useful...
    if (!json[project.minecraft_version].containsKey(version.toString()))
        json[project.minecraft_version][version.toString()] = project.changelogUrl
    json[project.minecraft_version] = json[project.minecraft_version].sort([compare: { a, b -> b.compareTo(a) }] as Comparator)
    json['promos']["${project.minecraft_version}-latest"] = version
    json['promos']["${project.minecraft_version}-recommended"] = version

    println(json)
    file.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)))
}

String getAllChangeLog() {
    final old_log = file("CHANGELOG.md")
    final header_file = file("header.md")

    def all_log = old_log.exists() ? old_log.text : "No change log provided."
    def header = header_file.exists() ? header_file.text : ""
    return header + System.lineSeparator() + all_log
}

String getLatestChangeLog() {
    final def log_file = file("changes.md")
    final def header_file = file("header.md")
    def log = log_file.exists() ? log_file.text : "No change log provided."
    def header = header_file.exists() ? header_file.text : ""
    return header + System.lineSeparator() + log
}

task makeChangeLog() {
    doLast {
        moveOldLog()
    }
}

void moveOldLog() {
    def new_log_file = file("changes.md")
    def old_log_file = file("CHANGELOG.md")

    if (new_log_file.exists()) {
        if (!old_log_file.exists())
            old_log_file.createNewFile()
        def version = project.version
        def dateFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd")
        def currDate = LocalDate.now()
        def combined = "## [${project.loader}-${version}] - " + currDate.format(dateFormat) + System.lineSeparator() + new_log_file.text.trim() + System.lineSeparator() + System.lineSeparator() + old_log_file.text
        old_log_file.setText(combined)
    }
}

task createUpdateJson {
    doLast {
        println('Updating update.json...')
        writeUpdateJson()
    }
}
build.finalizedBy createUpdateJson
