buildscript {
    ext{
        cloth_config_version = '4.1.3'
        auto_config1u_version = '3.3.1'
    }

    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.github.breadmoirai.github-release" version '2.2.10'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

repositories {
    maven {
        name = 'Cloth Config'
        url = 'https://dl.bintray.com/shedaniel/cloth-config-2'
    }
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
    mavenLocal()
    jcenter()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-Xlint:deprecation']
}

javadoc {
    failOnError = false
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

archivesBaseName = "${project.repoName}-${project.loader}-${project.minecraft_version}"

minecraft {
    mappings channel: project.mcp_channel.toString(), version: project.mcp_mappings.toString()

    runs {
        client {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run-client')

            mods {
                edit_sign {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            workingDirectory project.file('run-server')
            mods {
                edit_sign {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    filesMatching("**/mods.toml") {
        expand project.properties
    }
}

jar.finalizedBy('reobfJar')

import net.minecraftforge.gradle.common.task.SignJar
task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        project.hasProperty('forgeKeyStore')
    }

    keyStore = project.findProperty('forgeKeyStore')
    alias = project.findProperty('forgeKeyStoreAlias')
    storePass = project.findProperty('forgeKeyStorePass')
    keyPass = project.findProperty('forgeKeyStoreKeyPass')
    inputFile = jar.getArchiveFile()
    outputFile = jar.getArchiveFile()
}
build.dependsOn signJar
assemble.dependsOn signJar

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"

    implementation(fg.deobf("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"))
}

jar {
    manifest {
        attributes(["Specification-Title"     : project.mod_id,
                    "Specification-Vendor"    : "RakSrinaNa",
                    "Specification-Version"   : "0.2",
                    "Implementation-Title"    : project.modName,
                    "Implementation-Version"  : project.version,
                    "Implementation-Vendor"   : "RakSrinaNa",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

curseforge {
    apiKey = "${project.findProperty("curseforgeApiKey")}"
    project {
        id = "${project.curseforge_project_id}"
        changelogType = 'markdown'
        addGameVersion project.minecraft_version
        addGameVersion project.loader
        changelog = getLatestChangeLog()
        releaseType = "${project.curseforge_release_type}"
        mainArtifact(jar) {
            displayName = "${archivesBaseName}-${project.version}"
        }
        relations {
            optionalDependency 'cloth-config-forge'
        }
    }
    options {
        javaVersionAutoDetect = false
    }
}

githubRelease {
    def tag = "${archivesBaseName}-${project.version}"

    owner = project.repoUser
    repo.set(project.repoName as String)
    token("${project.findProperty("githubReleaseToken")}")
    tagName.set(tag)
    releaseName.set(tag)
    targetCommitish.set("${project.minecraft_version}-forge")
    body.set(getLatestChangeLog())
}

// Update JSON management

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

import java.time.LocalDate
import java.time.format.DateTimeFormatter

def writeUpdateJson() {
    def version = project.version
    def slurper = new JsonSlurper()
    def file = project.file('update.json')
    def json = slurper.parse(file)
    def changelogUrl = "https://github.com/${project.repoUser}/${project.repoName}/blob/${project.minecraft_version}-forge/CHANGELOG.md"

    json['changelog'] = changelogUrl

    // TODO: Maybe add something to create an abbreviated changelog? May not be useful...
    if (!json[project.minecraft_version].containsKey(version.toString()))
        json[project.minecraft_version][version.toString()] = changelogUrl
    json[project.minecraft_version] = json[project.minecraft_version].sort([compare: { a, b -> b.compareTo(a) }] as Comparator)
    json['promos']["${project.minecraft_version}-latest"] = version
    json['promos']["${project.minecraft_version}-recommended"] = version

    println(json)
    file.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)))
}

String getLatestChangeLog() {
    final def log_file = file("changes.md")
    final def header_file = file("header.md")
    def log = log_file.exists() ? log_file.text : "No change log provided."
    def header = header_file.exists() ? header_file.text : ""
    return header + System.lineSeparator() + log
}

task makeChangeLog() {
    doLast {
        moveOldLog()
    }
}

void moveOldLog() {
    def new_log_file = file("changes.md")
    def old_log_file = file("CHANGELOG.md")

    if (new_log_file.exists()) {
        if (!old_log_file.exists())
            old_log_file.createNewFile()
        def version = project.version
        def dateFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd")
        def currDate = LocalDate.now()
        def combined = "## [${project.loader}-${project.minecraft_version}-${version}] - " + currDate.format(dateFormat) + System.lineSeparator() + new_log_file.text.trim() + System.lineSeparator() + System.lineSeparator() + old_log_file.text
        old_log_file.setText(combined)
    }
}

task createUpdateJson {
    doLast {
        println('Updating update.json...')
        writeUpdateJson()
    }
}
build.finalizedBy createUpdateJson
