plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id "com.github.breadmoirai.github-release" version "2.2.10"
    id 'com.novoda.build-properties' version '0.4.1'
}

apply plugin: "com.github.breadmoirai.github-release"

buildProperties {
    secrets {
        using(file('secrets.properties')).or(System.getenv()).or([
                "CURSEFORGE_API_KEY": "N/A",
                "GITHUB_TOKEN"      : "N/A"
        ])
    }
}


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = "${project.repoName}-${project.loader}-${project.minecraft_version}"

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "mod_id": project.mod_id, "version": project.version, "minecraft_version": project.minecraft_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs = ['-Xlint:deprecation']
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        // mavenLocal()
    }
}

curseforge {
    apiKey = buildProperties.secrets['CURSEFORGE_API_KEY'].string
    project {
        id = "${project.curseforge_project_id}"
        changelogType = 'markdown'
        addGameVersion project.minecraft_version
        addGameVersion project.loader
        changelog = getLatestChangeLog()
        releaseType = "${project.curseforge_release_type}"
        mainArtifact(remapJar) {
            displayName = "${archivesBaseName}-${project.version}"
        }
        afterEvaluate {
            uploadTask.dependsOn('remapJar')
        }
        relations {
            requiredDependency 'fabric-api'
        }
    }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

githubRelease {
    owner = "RakSrinaNa"
    repo = project.repoName
    token = buildProperties.secrets['GITHUB_TOKEN'].string
    tagName = "${archivesBaseName}-${project.version}"
    releaseName = "${archivesBaseName}-${project.version}"
    targetCommitish = "${project.minecraft_version}-fabric"
    body {
        return getLatestChangeLog()
    }
}

import java.time.LocalDate
import java.time.format.DateTimeFormatter

String getAllChangeLog() {
    final old_log = file("CHANGELOG.md")
    final header_file = file("header.md")

    def all_log = old_log.exists() ? old_log.text : "No change log provided."
    def header = header_file.exists() ? header_file.text : ""
    return header + System.lineSeparator() + all_log
}

String getLatestChangeLog() {
    final def log_file = file("changes.md")
    final def header_file = file("header.md")
    def log = log_file.exists() ? log_file.text : "No change log provided."
    def header = header_file.exists() ? header_file.text : ""
    return header + System.lineSeparator() + log
}

task makeChangeLog() {
    doLast {
        moveOldLog()
    }
}

void moveOldLog() {
    def new_log_file = file("changes.md")
    def old_log_file = file("CHANGELOG.md")

    if (new_log_file.exists()) {
        if (!old_log_file.exists())
            old_log_file.createNewFile()
        def dateFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd")
        def currDate = LocalDate.now()
        def combined = "## [${project.loader}-${project.minecraft_version}-${version}] - " + currDate.format(dateFormat) + System.lineSeparator() + new_log_file.text.trim() + System.lineSeparator() + System.lineSeparator() + old_log_file.text
        old_log_file.setText(combined)
    }
}
